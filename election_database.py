# -*- coding: utf-8 -*-
"""election_database.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_Wf3cvF6Df-RTlxgZsXlcZtiknRyQrwo

# Import Library
"""

!pip install pymysql

import json
import urllib
import pandas as pd
from urllib.parse import urlencode, quote_plus, unquote, quote
from urllib.request import urlopen
from pandas.io.json import json_normalize
from sqlalchemy import create_engine
import pymysql
import datetime as dt
import sklearn
from sklearn.preprocessing import LabelEncoder

pymysql.install_as_MySQLdb()
import MySQLdb

pd.options.display.max_colwidth = 100

"""# Dataframe make function"""

service_key = 'SE0dHlfRrFs9F7Z8K6y6qmYRqrAFPtIrJnMdsrJLTMm1y5JvTVKl5Z8JpG4%2BBcvj%2Bv9kS1d1%2B8gQBmmxcMqMXg%3D%3D'

"""## Election Code dataframe make function"""

def get_election_df(pg_num = 1, num_row = 100):
  election_base_url = 'http://apis.data.go.kr/9760000/CommonCodeService/getCommonSgCodeList'

  page_no = str(pg_num)
  num_of_rows = str(num_row)                                  # maximum 34 datas

  queryParams = '?' + urlencode({
      quote_plus('pageNo') : page_no,
      quote_plus('numOfRows') : num_of_rows,
      quote_plus('resultType') : 'json',
      quote_plus('ServiceKey') : service_key 
  })

  API_election_code_url = election_base_url + unquote(queryParams)

  # Election code load

  '''
  < election code >
  (0)대표선거명               
  (1)대통령,(2)국회의원,(3)시도지사,(4)구시군장,(5)시도의원,(6)구시군의회의원
  (7)국회의원비례대표,(8)광역의원비례대표,(9)기초의원비례대표,(10)교육의원,(11)교육감
  '''

  response = urlopen(API_election_code_url)
  json_str = response.read()

  json_object = json.loads(json_str)

  body = [json_object['getCommonSgCodeList']['item']]

  election_code_data = pd.json_normalize(json_object['getCommonSgCodeList']['item'])
  
  return election_code_data

"""## Candidate Info dataframe make function"""

def get_candidate_df(sgId, sgTypecode, num_of_row=1000):
  candidate_base_url = 'http://apis.data.go.kr/9760000/PofelcddInfoInqireService/getPofelcddRegistSttusInfoInqire'

  queryParams = '?' + urlencode({
      quote_plus('numOfRows') : str(num_of_row),        # optional
      quote_plus('sgId') : str(sgId),                   # load from election code
      quote_plus('sgTypecode') : str(sgTypecode),       # load from election code
      quote_plus('sggName') : '',                       # optional
      quote_plus('sdName') : '',                        # optional
      quote_plus('resultType') : 'json',                # must set JSON
      quote_plus('ServiceKey') : service_key
  })

  API_candidate_url = candidate_base_url + unquote(queryParams)

  # candidate info load

  response = urlopen(API_candidate_url)
  json_str = response.read().decode('utf-8')

  json_object = json.loads(json_str)

  body = [json_object['getPofelcddRegistSttusInfoInqire']['item']]

  candidate_data = pd.json_normalize(json_object['getPofelcddRegistSttusInfoInqire']['item'])

  candidate_data.rename(columns={'HUBOID' : 'cnddtId', 'JD_NAME': 'partyName'}, inplace=True)

  return candidate_data

"""## Elction Promise dataframe make function"""

def get_promise_df(sgId, sgTypecode, hudoId):
  # 선거종료 후 데이터가 갱신되는 시점부터는 당선인의 공약 정보만 제공

  promise_base_url = 'http://apis.data.go.kr/9760000/ElecPrmsInfoInqireService/getCnddtElecPrmsInfoInqire'

  queryParams = '?' + urlencode({
      quote_plus('sgId') : str(sgId),                   # load from election code
      quote_plus('sgTypecode') : str(sgTypecode),       # load from election code
      quote_plus('cnddtId') : str(hudoId),              # parameter name is cnddtId but DB column name is HUBOID
      quote_plus('resultType') : 'json',                # must set JSON
      quote_plus('ServiceKey') : service_key
  })

  API_promise_url = promise_base_url + unquote(queryParams)

  # promise load

  response = urlopen(API_promise_url)
  json_str = response.read().decode('utf-8')

  json_object = json.loads(json_str)

  body = [json_object['getCnddtElecPrmsInfoInqire']['item']]

  promise_data = pd.json_normalize(json_object['getCnddtElecPrmsInfoInqire']['item'])

  return promise_data

"""## Polls Info dataframe make function

### Pre polls info dataframe make function
"""

def get_prepoll_df(sgId, sdName):
  prepoll_base_url = 'http://apis.data.go.kr/9760000/PolplcInfoInqireService2/getPrePolplcOtlnmapTrnsportInfoInqire'

  queryParams = '?' + urlencode({
      quote_plus('sgId') : str(sgId),                   # load from election code
      quote_plus('sdName') : quote(sdName),             # must input parameter, query parma is korean, so wrap the quote
      quote_plus('resultType') : 'json',                # must set JSON
      quote_plus('ServiceKey') : service_key
  })

  API_prepoll_url = prepoll_base_url + unquote(queryParams)

  response = urlopen(API_prepoll_url)
  json_str = response.read().decode('utf-8')

  json_object = json.loads(json_str)

  body = [json_object['getPrePolplcOtlnmapTrnsportInfoInqire']['item']]

  prepoll_data = pd.json_normalize(json_object['getPrePolplcOtlnmapTrnsportInfoInqire']['item'])
  return prepoll_data

"""### Main polls info dataframe make function"""

def get_mainpoll_df(sgId, sdName):
  poll_base_url = 'http://apis.data.go.kr/9760000/PolplcInfoInqireService2/getPolplcOtlnmapTrnsportInfoInqire'

  queryParams = '?' + urlencode({
      quote_plus('sgId') : str(sgId),                   # load from election code
      quote_plus('sdName') : quote(sdName),             # must input parameter, query parma is korean, so wrap the quote
      quote_plus('resultType') : 'json',                # must set JSON
      quote_plus('ServiceKey') : service_key
  })

  API_poll_url = poll_base_url + unquote(queryParams)

  response = urlopen(API_poll_url)
  json_str = response.read().decode('utf-8')

  json_object = json.loads(json_str)

  body = [json_object['getPolplcOtlnmapTrnsportInfoInqire']['item']]

  poll_data = pd.json_normalize(json_object['getPolplcOtlnmapTrnsportInfoInqire']['item'])
  return poll_data

"""# DataFrame load test

## Election code load
"""

get_election_df().head()

"""## Cadidate info load"""

get_candidate_df(20210407, 3).head()

"""## Promise load"""

# 당선인이 나온 후엔 당선인 공약만 확인 가능
data = get_promise_df(20210407, 3, 100138272)
data

data['prmmCont1']

"""## Poll info load

### Pre poll info load
"""

get_prepoll_df(20210407, '서울특별시').head()

"""### Main poll info load"""

get_mainpoll_df(20210407, '서울특별시').head()

"""# Data Preprocessing

## election_code data preprocessing
"""

def election_code_preprocessing():
  data = get_election_df()
  data = data.drop('NUM', axis=1)
  data.columns = ['sgId', 'sgName', 'sgTypecode', 'sgVotedate']
  election_code = data
  election_code = election_code.astype({'sgId':int, 'sgTypecode':int, 'sgName':str})
  election_code.set_index('sgId', inplace=True)

  return election_code

election_code = election_code_preprocessing()
data = election_code.reset_index()

election_code.head()

"""## Candidate data preprocessing"""

election_data = data[['sgId', 'sgTypecode']]
election_data.head()

"""### Concat the all candidate df"""

candidate_df = pd.DataFrame()

for i in range(len(election_data)):
  curr_id = election_data['sgId'][i]
  curr_code = election_data['sgTypecode'][i]
  curr_df = pd.DataFrame()

  if curr_code != 0:
    curr_df = get_candidate_df(curr_id, curr_code)
  
  candidate_df = pd.concat([candidate_df, curr_df], ignore_index=True)

cand_age = candidate_df['AGE']
candidate = candidate_df.drop(['NUM', 'GIHO_SANGSE', 'HANJA_NAME', 'JOB_ID', 'EDU_ID', 'EDU', 'CAREER1', 'CAREER2', 'partyName', 'AGE'], axis=1)

candidate.columns = ['sgId', 'sgTypecode', 'cnddtId', 'sggName', 'sdName', 'wiwName', 'giho', 'name', 'gender', 'birthday','address', 'job', 'status']

candidate.tail()

le = LabelEncoder()

for category in ['gender', 'status']:
  candidate[category] = le.fit_transform(candidate[category])

candidate.tail()

"""encoding the gender data 0 / 1"""

candidate[candidate['giho'] == ''] = 1

"""giho null value processing"""

candidate = candidate.astype({'sgId':int, 'sgTypecode':int, 'cnddtId':int, 'gender':int, 'status':int, 'giho':int})
candidate.set_index('sgId', inplace=True)

candidate.reset_index()

candidate.head()

"""## Polls data preprocessing

### pre_polls data preprocessing

### main_polls data preprocessing
"""



"""# MySQL link to GCP

## GCP MySQL connection
"""

host = '34.64.72.201'
user = 'root'
pw = 'root'
db = 'election'
port = 3306

try:
    conn = pymysql.connect(host=host, port=port, user=user, password=pw, db=db)
    engine = create_engine('mysql+mysqldb://'+user+':'+pw+'@'+host+':3306/'+db, encoding='utf-8')

except Exception as err:
    print('Connection Failed (Error msg : ' + str(err) + ')')
else:
    print('Connection  Success!')

connection = engine.connect()
connection

"""# Queries & data insert

## CREATE TABLE
"""

create_election_code = """CREATE TABLE election_code (  
    sgId INT NOT NULL,
    sgTypecode INT NOT NULL,
    sgName INT NOT NULL,
    sgVotedate TIMESTAMP NOT NULL,
    PRIMARY KEY (sgId, sgTypecode)
) default charset utf8;"""

create_pre_polls = """CREATE TABLE pre_polls (  
    sgId INT NOT NULL,
    sdName VARCHAR(30) NOT NULL ,
    wiwName VARCHAR(30) NOT NULL ,
    emdName VARCHAR(50) NOT NULL ,
    evOrder INT NOT NULL ,
    evPsName VARCHAR(80) NOT NULL ,
    placeName VARCHAR(100) NOT NULL ,
    `address` VARCHAR(150) NOT NULL ,
    `floor` INT NOT NULL ,
    PRIMARY KEY(evPsName) ,
    FOREIGN KEY(sgId) REFERENCES election_code(sgId)
) default charset utf8;"""

create_main_polls = """CREATE TABLE main_polls (  
    sgId INT NOT NULL,
    sdName VARCHAR(30) NOT NULL ,
    wiwName VARCHAR(30) NOT NULL ,
    emdName VARCHAR(50) NOT NULL ,
    PsName VARCHAR(80) NOT NULL ,
    placeName VARCHAR(100) NOT NULL ,
    `address` VARCHAR(150) NOT NULL ,
    `floor` INT NOT NULL ,
    PRIMARY KEY(PsName) ,
    FOREIGN KEY(sgId) REFERENCES election_code(sgId)
) default charset utf8;"""

create_politician = """CREATE TABLE politician (
    num INT NOT NULL ,
    `name` VARCHAR(20) NOT NULL ,
    imageLink TEXT ,
    sggName VARCHAR(35) NOT NULL ,
    deptCode INT NOT NULL ,
    memTitle LONGTEXT ,
    birthday TIMESTAMP NOT NULL ,
    age INT NOT NULL ,
    PRIMARY KEY (num)
) default charset utf8;"""

create_candidate = """CREATE TABLE candidate (
    cnddtId INT NOT NULL ,
    num INT NOT NULL ,
    sgId INT NOT NULL ,
    sgTypecode INT NOT NULL ,
    sggName VARCHAR(35) NOT NULL ,
    sdName VARCHAR(30) NOT NULL ,
    wiwName VARCHAR(30) NOT NULL ,
    giho INT NOT NULL ,
    `name` VARCHAR(20) NOT NULL ,
    gender TINYINT NOT NULL ,
    `address` VARCHAR(100) ,
    job VARCHAR(100) ,
    `status` TINYINT NOT NULL ,
    birthday TIMESTAMP NOT NULL ,
    PRIMARY KEY (cnddtId),
    FOREIGN KEY (num) REFERENCES politician (num),
    FOREIGN KEY (sgId, sgTypecode) REFERENCES election_code (sgId, sgTypecode)
) default charset utf8;"""

create_promise = """CREATE TABLE promise (
    prmIdx INT AUTO_INCREMENT NOT NULL ,
    cnddtId INT NOT NULL ,
    prmOrd INT ,
    prmTitle VARCHAR(100) ,
    prmCont LONGTEXT,
    PRIMARY KEY (prmIdx),
    FOREIGN KEY (cnddtId) REFERENCES candidate (cnddtId)
);"""

"""## Data insert

### election_code insert
"""

election_code.to_sql(name='election_code', con=engine, if_exists='append')

"""### candidate insert"""

candidate.to_sql(name='candidate')